# 파이썬 개요

# 프로그래밍 언어 특성
# 컴파일러 방식
# 소스코드 작성 후 일괄적으로 기계어로 번역 후 실행
# 소스코드를 기계어로 변환하는 과정 : 컴파일
# 소스코드를 기계어로 변환하는 프로그램 : 컴파일러
# ex) c, c++

# 인터프리터 interpreter 방식
# 소스코드 작성 후 코드 한 줄씩 일고 실행
# 별도로 실행파일은 생성되지 않음 -> 속도가 느림
# 코드를 한줄씩 읽고 기계어로 변환하는 프로그램 : 인터프리터
# 수정사항 발생 시 다시 전체 소스코드를 컴파일해야함
# ex) gwbasic, fortran, javascript, python


# 하이브리드 방식
# 컴파일 + 인터프리터 방식 혼용
# 즉, 소스코드를 번역해서 중간코드 생성
# 중간코드는 인터프리터 방식으로 한 줄씩 읽어 코드 실행
# 플랫폼에 독립적인 코드 작성/실행이 용이해짐
# 자바, 닷넷

# 간단한 다이아몬드 출력
print('    *')
print('   ***')
print('  *****')
print(' *******')
print('*********')
print(' *******')
print('  *****')
print('   ***')
print('    *')


# print 함수 사용법
print('')  # 문자형태로 출력


print('%d +%d은 %d입니다' %(100,100,100+100))

# print()에서 사용할 수 있는 형식지정자
# %d : 정수
# %f : 실수
# %c : 문자 1자
# %s : 문자열

print('%d' % 1234567890)
print('%15d' % 1234567890)
print('%015d' % 1234567890)

print('%f' % 1234567890)
print('%7.1f' % 1234567890)

print('%s' % 'abcdefghi')
print('%15s' % 'abcdefghi')

# format 함수를 이용한 출력
print('{0}+{1}은 {2}입니다' .format(100,100,100+100))

# 주의!) 문자지정 인덱스는 0부터 시작함

# print 함수를 이용한 특수문자 출력
# \n : 줄바꿈
# \' : '출력
# \" : "출력
# \t : 탭 출력

print('\n줄바꿈\n연습\n')
print('\t탭\t연습\t')

print('*   *    **    ****    ****    *   *       /////      ')
print('*   *   *  *   *   *   *   *   *   *      | o o | '  )
print('*****  *    *  ****    ****     * *      (|  ^  |)  ')
print('*   *  ******  *   *   *   *     *        | [ ] |')
print('*   *  *    *  *    *  *    *    *         -----')




2.


name = ()
weight =()
age = ()


3.

# 4. ?????
x,y=4,8
x*=y
x-=y


5.
x= 3
print(x + 7 ==10)

# merge 테스트 중!!!
print(' merge 테스트 중!!!')
